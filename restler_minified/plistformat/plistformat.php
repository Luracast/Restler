<?php
 class PlistFormat implements iFormat { public static $binary_mode = false; const MIME_BINARY = 'application/x-plist'; const MIME_XML = 'application/xml'; const EXTENSION_BINARY = 'bplist'; const EXTENSION_XML = 'plist'; public function getMIMEMap(){ return array( PlistFormat::EXTENSION_BINARY=>PlistFormat::MIME_BINARY, PlistFormat::EXTENSION_XML=>PlistFormat::MIME_XML ); } public function getMIME(){ return PlistFormat::$binary_mode ? PlistFormat::MIME_BINARY : PlistFormat::MIME_XML; } public function getExtension(){ return PlistFormat::$binary_mode ? PlistFormat::EXTENSION_BINARY : PlistFormat::EXTENSION_XML; } public function setMIME($mime){ PlistFormat::$binary_mode = $mime==PlistFormat::MIME_BINARY; } public function setExtension($extension){ PlistFormat::$binary_mode = $extension==PlistFormat::EXTENSION_BINARY; } public function encode($data, $human_readable=false){ require_once'CFPropertyList.php'; if(!PlistFormat::$binary_mode) { PlistFormat::$binary_mode = !$human_readable; } else { $human_readable=false; } $plist = new CFPropertyList(); $td = new CFTypeDetector(); $guessedStructure = $td->toCFType(object_to_array($data)); $plist->add( $guessedStructure ); return $human_readable ? $plist->toXML(true) : $plist->toBinary(); } public function decode($data){ require_once'CFPropertyList.php'; $plist = new CFPropertyList(); $plist->parse($data); return $plist->toArray(); } public function __toString(){ return $this->getExtension(); } }